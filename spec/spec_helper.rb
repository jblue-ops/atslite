# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See https://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

# Load SimpleCov before any application code
if ENV["COVERAGE"] || ENV["CI"]
  require "simplecov"
  require "simplecov-html"
  require "simplecov-console"

  SimpleCov.start "rails" do
    # Track coverage across all processes for parallel test runs
    use_merging true
    merge_timeout 3600

    # Minimum coverage thresholds for ATS application
    minimum_coverage 85
    minimum_coverage_by_file 70

    # Coverage groups specific to ATS functionality
    add_group "Models", "app/models"
    add_group "Controllers", "app/controllers"
    add_group "Helpers", "app/helpers"
    add_group "Services", "app/services"
    add_group "Jobs", "app/jobs"
    add_group "Mailers", "app/mailers"
    add_group "Policies", "app/policies"
    add_group "Decorators", "app/decorators"
    add_group "Forms", "app/forms"
    add_group "Libraries", "lib/"

    # ATS-specific groupings
    add_group "Candidate Management", ["app/models/candidate.rb", "app/controllers/candidates_controller.rb", "app/services/candidate_*.rb"]
    add_group "Job Posting", ["app/models/job.rb", "app/controllers/jobs_controller.rb", "app/services/job_*.rb"]
    add_group "Application Tracking", ["app/models/application.rb", "app/controllers/applications_controller.rb", "app/services/application_*.rb"]
    add_group "Interview Management", ["app/models/interview.rb", "app/controllers/interviews_controller.rb", "app/services/interview_*.rb"]
    add_group "User Management", ["app/models/user.rb", "app/controllers/users_controller.rb", "app/services/user_*.rb"]

    # Files to ignore from coverage
    add_filter "/spec/"
    add_filter "/test/"
    add_filter "/features/"
    add_filter "/config/"
    add_filter "/db/"
    add_filter "/vendor/"
    add_filter "/coverage/"
    add_filter "app/channels/application_cable"
    add_filter "app/jobs/application_job.rb"
    add_filter "app/mailers/application_mailer.rb"
    add_filter "app/models/application_record.rb"
    add_filter "app/controllers/application_controller.rb"

    # Formatter configuration
    formatters = [SimpleCov::Formatter::HTMLFormatter]
    
    if ENV["CI"]
      formatters << SimpleCov::Formatter::Console
    end
    
    formatter SimpleCov::Formatter::MultiFormatter.new(formatters)

    # Track files even with zero coverage
    track_files "{app,lib}/**/*.rb"
  end

  # Custom coverage thresholds for critical ATS components
  SimpleCov.at_exit do
    SimpleCov.result.format!
    
    # Fail the build if coverage is too low
    if SimpleCov.result.covered_percent < SimpleCov.minimum_coverage
      puts "\nCoverage (#{SimpleCov.result.covered_percent.round(2)}%) is below the minimum threshold (#{SimpleCov.minimum_coverage}%)"
      exit 1
    end

    # Check file-level coverage for critical ATS files
    critical_files = [
      "app/models/candidate.rb",
      "app/models/job.rb", 
      "app/models/application.rb",
      "app/controllers/candidates_controller.rb",
      "app/controllers/jobs_controller.rb",
      "app/controllers/applications_controller.rb"
    ]

    critical_files.each do |file|
      next unless SimpleCov.result.files.find { |f| f.filename.end_with?(file) }
      
      file_coverage = SimpleCov.result.files.find { |f| f.filename.end_with?(file) }.covered_percent
      if file_coverage < 90
        puts "\nCritical file #{file} has insufficient coverage (#{file_coverage.round(2)}%, minimum: 90%)"
        exit 1
      end
    end
  end
end
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

# The settings below are suggested to provide a good initial experience
# with RSpec, but feel free to customize to your heart's content.
=begin
  # This allows you to limit a spec run to individual examples or groups
  # you care about by tagging them with `:focus` metadata. When nothing
  # is tagged with `:focus`, all examples get run. RSpec also provides
  # aliases for `it`, `describe`, and `context` that include `:focus`
  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  config.filter_run_when_matching :focus

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  # https://rspec.info/features/3-12/rspec-core/configuration/zero-monkey-patching-mode/
  config.disable_monkey_patching!

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = "doc"
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed
=end
end
